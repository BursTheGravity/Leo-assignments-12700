import random

def find_alphas(w):
    '''
    input: w - string representing a "word"
    output: the string with non alpha chars removed
    '''
    all_letters=""
    for l in w:
        if l.isalpha():
            all_letters = all_letters + l
    return all_letters

"""
def make_trigram_dict(wordlist):
    '''
    input: wordlist - list of alpha chars/words
    output: a dictionary containing every two "words" in the text with a list
            of words that appear after them in the text
    '''
    dict = {}
    
    for i in range(len(wordlist)-2):
        word1 = wordlist[i]
        word2 = wordlist[i+1]
        next_word = wordlist[i+2]
        #set variables in one line instead of three:
        #(word1, word2, next_word) = (wordlist[i], wordlist[i+1], wordlist[i+2])
        
        #create a default empty list for new "words"
        dict.setdefault( (word1, word2), [] )
        #add the next word in the wordlist as a value for the word in dict
        dict[word1, word2].append(next_word)
    
    #accounts for the last word:
    #last_word = wordlist[len(wordlist)-1]
    #dict.setdefault(last_word, [])
    return dict
"""

def build_ngram(wordlist, prelength):
    d = {}
    for i in range(0, len(wordlist)-prelength):
        sublist = wordlist[i:i+prelength+1]
        t = tuple(sublist[0:len(sublist)-1])
        d.setdefault(t, [])
        d[t].append(sublist[-1])
    return d

def bwcff(f, n):
    '''
    input: f - string representing a filename
    output: a dictionary with keys for words and values
            of the number of times each word occurs
    '''
    text = open(f).read()
    l=[]
    for w in text.split():
        w = w.lower()
        w = find_alphas(w)
        l.append(w)
    
    #Make a trigram dictionary
    d = build_ngram(l, n)
    
    return d

'''
def generate_trigram_text(d, start_words, length = 50):
    wordlist = []
    next_words = start_words
    next_added_word = ""
    
    #initial words = 2 starting words:
    for word in next_words:
        wordlist.append(word)
    
    for i in range (length):
        #if no instances of the pair of words in next_words exist, break
        if next_words not in d:
            break
        #choose a random word from start_words 
        next_added_word = random.choice(d[next_words])
        wordlist.append(next_added_word)
        #create new next words list with last element of next_words and new word
        next_words = ( next_words[1], next_added_word )
        
    ans = " ".join(wordlist)
    return ans
'''

def generate_text(d, length = 50):
    k = d.keys()
    key_list = list(k)
    next = random.choice(key_list)
    text_list = list(next)
    for i in range(length):
        new_word = random.choice(d[next])
        if new_word == "":
            break
        next = next[1:] + (new_word,)
        text_list.append(new_word)
    return " ".join(text_list)

#==========================RUN FUNCTIONS BELOW================================

#change number of words in key
n = 3

hamlet = bwcff("hamlet.txt", n)
psalms = bwcff("psalms.txt", n)
sonnets = bwcff("sonnets.txt", n)

#change number of words generated by text
i = 50

print("Hamlet ngram text:")
print(generate_text( hamlet, i ))

print("\nPsalms ngram text:")
print(generate_text( psalms, i ))

print("\nSonnets ngram text:")
print(generate_text( sonnets, i ))